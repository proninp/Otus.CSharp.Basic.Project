// <auto-generated />
using System;
using FinanceManager.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FinanceManager.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250109105154_MakeCategoryIdNullable")]
    partial class MakeCategoryIdNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FinanceManager.Core.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("FinanceManager.Core.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CategoryType")
                        .HasColumnType("integer");

                    b.Property<string>("Emoji")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("FinanceManager.Core.Models.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrencySign")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Emoji")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b29d3d7-f0c6-4e06-8d93-266a624a48a5"),
                            CurrencyCode = "AED",
                            CurrencySign = "د.إ",
                            Emoji = "🇦🇪",
                            Title = "United Arab Emirates Dirham"
                        },
                        new
                        {
                            Id = new Guid("33ff4d60-238b-40e7-9365-e58b89e03a2f"),
                            CurrencyCode = "AUD",
                            CurrencySign = "$",
                            Emoji = "🇦🇺",
                            Title = "Australian Dollar"
                        },
                        new
                        {
                            Id = new Guid("d60f057a-f38b-4d86-a863-59c21f1afc2a"),
                            CurrencyCode = "BRL",
                            CurrencySign = "R$",
                            Emoji = "🇧🇷",
                            Title = "Brazilian Real"
                        },
                        new
                        {
                            Id = new Guid("cf7d8927-7850-4f6a-a948-805dbfe97d46"),
                            CurrencyCode = "CAD",
                            CurrencySign = "$",
                            Emoji = "🇨🇦",
                            Title = "Canadian Dollar"
                        },
                        new
                        {
                            Id = new Guid("29363e9f-6b1b-4ce0-9de3-a85b6320b7d3"),
                            CurrencyCode = "CHF",
                            CurrencySign = "CHF",
                            Emoji = "🇨🇭",
                            Title = "Swiss Franc"
                        },
                        new
                        {
                            Id = new Guid("5a73ddf2-ea75-4605-bc35-f129a8f7d193"),
                            CurrencyCode = "CNY",
                            CurrencySign = "¥",
                            Emoji = "🇨🇳",
                            Title = "Chinese Yuan"
                        },
                        new
                        {
                            Id = new Guid("050c49ba-4ba4-422b-9860-51edc88c5d8b"),
                            CurrencyCode = "DKK",
                            CurrencySign = "kr",
                            Emoji = "🇩🇰",
                            Title = "Danish Krone"
                        },
                        new
                        {
                            Id = new Guid("a92e6352-eff8-43c3-9683-6e1163aec392"),
                            CurrencyCode = "EUR",
                            CurrencySign = "€",
                            Emoji = "🇪🇺",
                            Title = "Euro"
                        },
                        new
                        {
                            Id = new Guid("edc7c5e3-fb5f-4951-a3ef-18f8d19f8a36"),
                            CurrencyCode = "GBP",
                            CurrencySign = "£",
                            Emoji = "🇬🇧",
                            Title = "British Pound Sterling"
                        },
                        new
                        {
                            Id = new Guid("15316d30-39c8-413a-9732-135280f5de4e"),
                            CurrencyCode = "HKD",
                            CurrencySign = "$",
                            Emoji = "🇭🇰",
                            Title = "Hong Kong Dollar"
                        },
                        new
                        {
                            Id = new Guid("c9578262-a5e9-4381-9027-24ab665817fe"),
                            CurrencyCode = "HUF",
                            CurrencySign = "Ft",
                            Emoji = "🇭🇺",
                            Title = "Hungarian Forint"
                        },
                        new
                        {
                            Id = new Guid("b5b6bacb-4de2-44aa-b102-4bee612ce114"),
                            CurrencyCode = "IDR",
                            CurrencySign = "Rp",
                            Emoji = "🇮🇩",
                            Title = "Indonesian Rupiah"
                        },
                        new
                        {
                            Id = new Guid("96e4b379-9964-4100-8178-4398098597c7"),
                            CurrencyCode = "INR",
                            CurrencySign = "₹",
                            Emoji = "🇮🇳",
                            Title = "Indian Rupee"
                        },
                        new
                        {
                            Id = new Guid("74589a3c-7482-4f56-bf4a-906316eab22b"),
                            CurrencyCode = "JPY",
                            CurrencySign = "¥",
                            Emoji = "🇯🇵",
                            Title = "Japanese Yen"
                        },
                        new
                        {
                            Id = new Guid("4a80793c-eedf-4c79-98c7-bc9c69941759"),
                            CurrencyCode = "KRW",
                            CurrencySign = "₩",
                            Emoji = "🇰🇷",
                            Title = "South Korean Won"
                        },
                        new
                        {
                            Id = new Guid("f594c21c-006a-45ef-be01-81af4d66c514"),
                            CurrencyCode = "MXN",
                            CurrencySign = "$",
                            Emoji = "🇲🇽",
                            Title = "Mexican Peso"
                        },
                        new
                        {
                            Id = new Guid("30794d32-5a31-4009-94cb-af2c3f37b12a"),
                            CurrencyCode = "MYR",
                            CurrencySign = "RM",
                            Emoji = "🇲🇾",
                            Title = "Malaysian Ringgit"
                        },
                        new
                        {
                            Id = new Guid("ff1b7827-b99a-4234-a5c8-f13d1d23235d"),
                            CurrencyCode = "NOK",
                            CurrencySign = "kr",
                            Emoji = "🇳🇴",
                            Title = "Norwegian Krone"
                        },
                        new
                        {
                            Id = new Guid("acd0d4b2-9719-4b42-ad6f-fe5eefdb4ad6"),
                            CurrencyCode = "NZD",
                            CurrencySign = "$",
                            Emoji = "🇳🇿",
                            Title = "New Zealand Dollar"
                        },
                        new
                        {
                            Id = new Guid("76941acb-779b-40c4-9503-d28bf8da705f"),
                            CurrencyCode = "PHP",
                            CurrencySign = "₱",
                            Emoji = "🇵🇭",
                            Title = "Philippine Peso"
                        },
                        new
                        {
                            Id = new Guid("82462286-5e89-4007-9bf8-1926f9bf9f36"),
                            CurrencyCode = "PLN",
                            CurrencySign = "zł",
                            Emoji = "🇵🇱",
                            Title = "Polish Zloty"
                        },
                        new
                        {
                            Id = new Guid("01805c1a-e33b-463d-a02c-28896bbe52d0"),
                            CurrencyCode = "RUB",
                            CurrencySign = "₽",
                            Emoji = "🇷🇺",
                            Title = "Russian Ruble"
                        },
                        new
                        {
                            Id = new Guid("416a4510-398b-487d-af48-8b60ddef7fd4"),
                            CurrencyCode = "SEK",
                            CurrencySign = "kr",
                            Emoji = "🇸🇪",
                            Title = "Swedish Krona"
                        },
                        new
                        {
                            Id = new Guid("a6b9ebd8-4098-4891-917f-5297a134656d"),
                            CurrencyCode = "SGD",
                            CurrencySign = "$",
                            Emoji = "🇸🇬",
                            Title = "Singapore Dollar"
                        },
                        new
                        {
                            Id = new Guid("d5f2f6fd-6db4-4028-8ead-5bade11d425e"),
                            CurrencyCode = "THB",
                            CurrencySign = "฿",
                            Emoji = "🇹🇭",
                            Title = "Thai Baht"
                        },
                        new
                        {
                            Id = new Guid("c91ce637-1b8b-4d9e-aaef-009a293db2c0"),
                            CurrencyCode = "TRY",
                            CurrencySign = "₺",
                            Emoji = "🇹🇷",
                            Title = "Turkish Lira"
                        },
                        new
                        {
                            Id = new Guid("f5c9ecf8-21f0-4034-b086-a3a0bf1d0c31"),
                            CurrencyCode = "USD",
                            CurrencySign = "$",
                            Emoji = "🇺🇸",
                            Title = "United States Dollar"
                        },
                        new
                        {
                            Id = new Guid("062cc5d5-534d-4728-a335-5a8fa7b20253"),
                            CurrencyCode = "ZAR",
                            CurrencySign = "R",
                            Emoji = "🇿🇦",
                            Title = "South African Rand"
                        });
                });

            modelBuilder.Entity("FinanceManager.Core.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FinanceManager.Core.Models.Transfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("FromAccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("FromAmount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ToAccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ToAmount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FromAccountId");

                    b.HasIndex("ToAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("FinanceManager.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Firstname")
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .HasColumnType("text");

                    b.Property<long>("TelegramId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FinanceManager.Core.Models.Account", b =>
                {
                    b.HasOne("FinanceManager.Core.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceManager.Core.Models.User", null)
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("FinanceManager.Core.Models.Category", b =>
                {
                    b.HasOne("FinanceManager.Core.Models.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinanceManager.Core.Models.User", null)
                        .WithMany("Categories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("FinanceManager.Core.Models.Transaction", b =>
                {
                    b.HasOne("FinanceManager.Core.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceManager.Core.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("FinanceManager.Core.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinanceManager.Core.Models.Transfer", b =>
                {
                    b.HasOne("FinanceManager.Core.Models.Account", "FromAccount")
                        .WithMany()
                        .HasForeignKey("FromAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceManager.Core.Models.Account", "ToAccount")
                        .WithMany()
                        .HasForeignKey("ToAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceManager.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromAccount");

                    b.Navigation("ToAccount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinanceManager.Core.Models.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("FinanceManager.Core.Models.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Categories");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
