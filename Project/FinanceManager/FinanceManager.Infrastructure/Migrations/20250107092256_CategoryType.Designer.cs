// <auto-generated />
using System;
using FinanceManager.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FinanceManager.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250107092256_CategoryType")]
    partial class CategoryType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FinanceManager.Core.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("FinanceManager.Core.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CategoryType")
                        .HasColumnType("integer");

                    b.Property<string>("Emoji")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("FinanceManager.Core.Models.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrencySign")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Emoji")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8f9367f-5cd0-49dd-854f-08ccd738acd6"),
                            CurrencyCode = "AED",
                            CurrencySign = "د.إ",
                            Emoji = "🇦🇪",
                            Title = "United Arab Emirates Dirham"
                        },
                        new
                        {
                            Id = new Guid("b10c89a3-3425-45c4-b1f5-7a2856b3fc75"),
                            CurrencyCode = "AUD",
                            CurrencySign = "$",
                            Emoji = "🇦🇺",
                            Title = "Australian Dollar"
                        },
                        new
                        {
                            Id = new Guid("e3fd0998-7859-4a8a-ac96-3a00f4a1380f"),
                            CurrencyCode = "BRL",
                            CurrencySign = "R$",
                            Emoji = "🇧🇷",
                            Title = "Brazilian Real"
                        },
                        new
                        {
                            Id = new Guid("d8024aeb-a64b-4ea6-8ed6-032e6bd4e21c"),
                            CurrencyCode = "CAD",
                            CurrencySign = "$",
                            Emoji = "🇨🇦",
                            Title = "Canadian Dollar"
                        },
                        new
                        {
                            Id = new Guid("5682e4f4-d9b1-4516-b6b4-b476c8621283"),
                            CurrencyCode = "CHF",
                            CurrencySign = "CHF",
                            Emoji = "🇨🇭",
                            Title = "Swiss Franc"
                        },
                        new
                        {
                            Id = new Guid("3e155dfb-d60d-487f-bbad-38891f319cea"),
                            CurrencyCode = "CNY",
                            CurrencySign = "¥",
                            Emoji = "🇨🇳",
                            Title = "Chinese Yuan"
                        },
                        new
                        {
                            Id = new Guid("95e5625a-2513-494f-80ae-76eabd6814d2"),
                            CurrencyCode = "DKK",
                            CurrencySign = "kr",
                            Emoji = "🇩🇰",
                            Title = "Danish Krone"
                        },
                        new
                        {
                            Id = new Guid("ab70cc45-600b-414b-bce6-e25094891637"),
                            CurrencyCode = "EUR",
                            CurrencySign = "€",
                            Emoji = "🇪🇺",
                            Title = "Euro"
                        },
                        new
                        {
                            Id = new Guid("b01cd414-188b-4d3f-ba3b-d524baa7553c"),
                            CurrencyCode = "GBP",
                            CurrencySign = "£",
                            Emoji = "🇬🇧",
                            Title = "British Pound Sterling"
                        },
                        new
                        {
                            Id = new Guid("a984694d-93b2-4dff-96a3-e3833e1d78f3"),
                            CurrencyCode = "HKD",
                            CurrencySign = "$",
                            Emoji = "🇭🇰",
                            Title = "Hong Kong Dollar"
                        },
                        new
                        {
                            Id = new Guid("6014164d-0804-4741-a112-1d91ef9d1743"),
                            CurrencyCode = "HUF",
                            CurrencySign = "Ft",
                            Emoji = "🇭🇺",
                            Title = "Hungarian Forint"
                        },
                        new
                        {
                            Id = new Guid("27d8037b-1cff-4ea6-88cd-46e8fc018895"),
                            CurrencyCode = "IDR",
                            CurrencySign = "Rp",
                            Emoji = "🇮🇩",
                            Title = "Indonesian Rupiah"
                        },
                        new
                        {
                            Id = new Guid("26a1f35d-184e-4c46-b0be-4de3e8f99faf"),
                            CurrencyCode = "INR",
                            CurrencySign = "₹",
                            Emoji = "🇮🇳",
                            Title = "Indian Rupee"
                        },
                        new
                        {
                            Id = new Guid("b6dde2ef-44eb-4b60-8df4-3a0537b3e549"),
                            CurrencyCode = "JPY",
                            CurrencySign = "¥",
                            Emoji = "🇯🇵",
                            Title = "Japanese Yen"
                        },
                        new
                        {
                            Id = new Guid("07f621b7-e1f7-4412-bb30-455caa6f4f5f"),
                            CurrencyCode = "KRW",
                            CurrencySign = "₩",
                            Emoji = "🇰🇷",
                            Title = "South Korean Won"
                        },
                        new
                        {
                            Id = new Guid("88941148-96d5-4add-8d62-5d1816219e31"),
                            CurrencyCode = "MXN",
                            CurrencySign = "$",
                            Emoji = "🇲🇽",
                            Title = "Mexican Peso"
                        },
                        new
                        {
                            Id = new Guid("1412f1df-2be7-402e-96f2-9d84aea83966"),
                            CurrencyCode = "MYR",
                            CurrencySign = "RM",
                            Emoji = "🇲🇾",
                            Title = "Malaysian Ringgit"
                        },
                        new
                        {
                            Id = new Guid("04fb7899-3ab7-4a4d-a222-507c24e17a70"),
                            CurrencyCode = "NOK",
                            CurrencySign = "kr",
                            Emoji = "🇳🇴",
                            Title = "Norwegian Krone"
                        },
                        new
                        {
                            Id = new Guid("cb2683e4-77e6-4bf2-9785-b9cd256d6b0b"),
                            CurrencyCode = "NZD",
                            CurrencySign = "$",
                            Emoji = "🇳🇿",
                            Title = "New Zealand Dollar"
                        },
                        new
                        {
                            Id = new Guid("d37cb5ca-6709-4ee1-914c-c529cfb82117"),
                            CurrencyCode = "PHP",
                            CurrencySign = "₱",
                            Emoji = "🇵🇭",
                            Title = "Philippine Peso"
                        },
                        new
                        {
                            Id = new Guid("45a9b0e7-51db-49ea-9a55-e78ed0438115"),
                            CurrencyCode = "PLN",
                            CurrencySign = "zł",
                            Emoji = "🇵🇱",
                            Title = "Polish Zloty"
                        },
                        new
                        {
                            Id = new Guid("fe2e42eb-cc6d-4a67-95df-6f19ebe84357"),
                            CurrencyCode = "RUB",
                            CurrencySign = "₽",
                            Emoji = "🇷🇺",
                            Title = "Russian Ruble"
                        },
                        new
                        {
                            Id = new Guid("ba66c4f8-7a03-48b2-bca8-6c97d574f92f"),
                            CurrencyCode = "SEK",
                            CurrencySign = "kr",
                            Emoji = "🇸🇪",
                            Title = "Swedish Krona"
                        },
                        new
                        {
                            Id = new Guid("07c3d415-eb4b-43e6-9751-28fbe90a0583"),
                            CurrencyCode = "SGD",
                            CurrencySign = "$",
                            Emoji = "🇸🇬",
                            Title = "Singapore Dollar"
                        },
                        new
                        {
                            Id = new Guid("879499da-9274-4ec1-9396-9a7929fe2ea4"),
                            CurrencyCode = "THB",
                            CurrencySign = "฿",
                            Emoji = "🇹🇭",
                            Title = "Thai Baht"
                        },
                        new
                        {
                            Id = new Guid("c2c1ed50-aeeb-46e1-b9eb-370e07460e8e"),
                            CurrencyCode = "TRY",
                            CurrencySign = "₺",
                            Emoji = "🇹🇷",
                            Title = "Turkish Lira"
                        },
                        new
                        {
                            Id = new Guid("7b968b9b-67c2-4b6c-a1c7-3e6564fc9972"),
                            CurrencyCode = "USD",
                            CurrencySign = "$",
                            Emoji = "🇺🇸",
                            Title = "United States Dollar"
                        },
                        new
                        {
                            Id = new Guid("48985362-384b-4c99-9e66-48c14c3cc4b0"),
                            CurrencyCode = "ZAR",
                            CurrencySign = "R",
                            Emoji = "🇿🇦",
                            Title = "South African Rand"
                        });
                });

            modelBuilder.Entity("FinanceManager.Core.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FinanceManager.Core.Models.Transfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("FromAccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("FromAmount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ToAccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ToAmount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FromAccountId");

                    b.HasIndex("ToAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("FinanceManager.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Firstname")
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .HasColumnType("text");

                    b.Property<long>("TelegramId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FinanceManager.Core.Models.Account", b =>
                {
                    b.HasOne("FinanceManager.Core.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceManager.Core.Models.User", null)
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("FinanceManager.Core.Models.Category", b =>
                {
                    b.HasOne("FinanceManager.Core.Models.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinanceManager.Core.Models.User", null)
                        .WithMany("Categories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("FinanceManager.Core.Models.Transaction", b =>
                {
                    b.HasOne("FinanceManager.Core.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceManager.Core.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceManager.Core.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinanceManager.Core.Models.Transfer", b =>
                {
                    b.HasOne("FinanceManager.Core.Models.Account", "FromAccount")
                        .WithMany()
                        .HasForeignKey("FromAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceManager.Core.Models.Account", "ToAccount")
                        .WithMany()
                        .HasForeignKey("ToAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceManager.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromAccount");

                    b.Navigation("ToAccount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinanceManager.Core.Models.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("FinanceManager.Core.Models.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Categories");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
